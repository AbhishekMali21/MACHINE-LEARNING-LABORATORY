# -*- coding: utf-8 -*-
"""P3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zy0uuj6kb2QjHA-1i_xfc4wIUGYd94ys
"""

import pandas as pd
import numpy as np
import math

df = pd.read_csv('PlayTennis.csv')

df.head()

concepts = df.iloc[:,:-1]
target = df.iloc[:,-1]

class Node:
  def __init__(self,attr):
    self.attr = attr
    self.children = []
    self.outcome = ""
  def __str__(self):
    return "{0} - {1}\n{2}\n".format(self.attr,self.outcome, [c for c in self.children])

  def __repr__(self):
    return self.__str__()

def outcome_count(d):
  p = 0
  n = 0
  for i,r in d.iterrows():
    if target[i] == 'Yes':
      p = p+1
    else:
      n = n+1
  return p,n

def outcome(d):
  p = 0
  n = 0
  for i,r in d.iterrows():
    if target[i] == 'Yes':
      p = p+1
    else:
      n = n+1
  if p == 0:
    return 'No'
  elif n == 0:
    return 'Yes'

def entropy(d,l,outcome=None):
  filtered = d[d[l] == outcome] if outcome else d
  p,n = outcome_count(filtered)
  pr = p/(p+n)
  nr = n/(p+n)
  try:
    return -(pr*math.log(pr,2))-(nr*math.log(nr,2))
  except:
    return 0

def gain(d,l):
  G = entropy(d,l)
  for li in d[l].unique():
    G = G - (d[d[l] == li].shape[0]/d[l].shape[0])*entropy(d,l,li)
  return G

def max_gain(d):
  gains = { i:gain(d,i) for i,s in d.iteritems() }
  key = ""

  for k,v in gains.items():
    if v == max(gains.values()):
      key = k

  return key

def ID3(d,target=None):
  tree = Node(target or "")
  out = outcome(d)
  if out:
    tree.outcome = out
    return tree
  elif d.shape[0] <= 1 or d.shape[1] <= 1:
    tree.outcome = max(outcome_count(d))
    return tree
  else:
    tree = Node(max_gain(d))
    for v in df[tree.attr].unique():
      sub_df = d[d[tree.attr] == v].drop(tree.attr,axis=1)
      tree.children.append(ID3(sub_df,v))
    return tree

ID3(concepts)