# -*- coding: utf-8 -*-
"""P10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TuwTrqhvSRL82NtwdUWjjmux5p40vkMm
"""

import math
import numpy as np
import matplotlib.pyplot as pl

def lowess(x, y, f, iter): 
  n = len(x)
  r = int(math.ceil(f * n))
  h = [np.sort(np.abs(x - x[i]))[r] for i in range(n)]
  w = np.clip(np.abs((x[:, None] - x[None, :]) / h), 0.0, 1.0) 
  w = (1 - w ** 3) ** 3
  yest = np.zeros(n)
  delta = np.ones(n)
  for iteration in range(iter):
    for i in range(n):
      weights = delta * w[:, i]
      b = np.array([np.sum(weights * y), np.sum(weights * y * x)]) 
      A = np.array([[np.sum(weights), np.sum(weights * x)], [np.sum(weights * x), np.sum(weights * x * x)]]) 
      beta = np.linalg.solve(A, b)
      yest[i] = beta[0] + beta[1] * x[i]
    residuals = y - yest
    s = np.median(np.abs(residuals))
    delta = np.clip(residuals / (6.0 * s), -1, 1) 
    delta = (1 - delta ** 2) ** 2
  return yest

n = 100
x = np.linspace(0, 2 * math.pi, n)
y = np.sin(x) + 0.3 * np.random.randn(n)
f = 0.3
yest = lowess(x, y, f, 3)

pl.clf()
pl.plot(x, y, label='y noisy') 
pl.plot(x, yest, label='y pred') 
pl.legend()
pl.show()

